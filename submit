#!/usr/bin/env bash

set -e

script_path="$( dirname "$0" )"

# Do command line parsing. there's not much of it as this script only
# takes one (a directory name or a filename).
if [[ "$#" != 1 ]]; then
    cat >&2 <<USAGE_END
Usage:
    $0 directory
    $0 flatfile

    directory   - The path to a directory where XML files to be submitted
                  to the ENA are located.

    flatfile    - The path to a flatfile to be submitted to the ENA.

NOTE: If the path to a flatfile is specified, it is assumed that the
accompnying XML files are located in the same directory as that file.

USAGE_END
    exit 1
fi

# NOTE: The following variables are global.
ENA_TEST_URL="https://www-test.ebi.ac.uk/ena/submit/drop-box/submit"
ENA_WEBIN_FTP="webin.ebi.ac.uk"

# Import our functions.

source "$script_path"/submit-compat.fun
source "$script_path"/submit-menus.fun
source "$script_path"/submit-xml.fun
source "$script_path"/submit-utils.fun

# NOTE: DATA_DIR and DATA_FILE are global.
DATA_FILE="$1"
DATA_DIR="$( dirname "$DATA_FILE" )"

# If no data file was given (just directory name), clear DATA_FILE
# and set DATA_DIR to that directory.
if [[ -d "$DATA_FILE" ]]; then
    DATA_DIR="$DATA_FILE"
    unset DATA_FILE
fi

if [[ ! -d "$DATA_DIR" ]]; then
    printf 'No such directory: %s\n' "$DATA_DIR" >&2
    exit 1
elif [[ -n "$DATA_FILE" ]] && [[ ! -f "$DATA_FILE" ]]; then
    printf 'No such file: %s\n' "$DATA_FILE" >&2
    exit 1
fi

# This is where we store the retrieved ENA IDs etc.

# NOTE: STATE_XML is global.
STATE_XML="$DATA_DIR/state.xml"

if [[ ! -f "$STATE_XML" ]]; then
    # Initialize the state XML file.

    init_xml "state" |
    add_attr "/state" "created" "$(timestamp)" |
    add_elem "/state" "files" >"$STATE_XML"
fi

# Get data from configuration file.  We currently assume that the
# configuration file, config.xml, is available in the current directory.
# We may change this later so that it's picked up from $DATA_DIR
# instead.

# NOTE: These three variables are global.
USERNAME="$( get_value "/config/username" <config.xml )"
PASSWORD="$( get_value "/config/password" <config.xml )"
CENTER_NAME="$( get_value "/config/center_name" <config.xml )"

# Examine the XML files in $DATA_DIR to figure out what they are.
# Creates the associative array XML_FILES with file names as keys and
# the top-level XML element as values.

# NOTE: XML_FILES is global.
declare -A XML_FILES

for f in "$DATA_DIR"/*.xml; do
    f_basename="$( basename "$f" )"

    case "$f_basename" in
        state.xml)      ;&  # fallthrough
        submission*.xml)
            continue    ;;
    esac

    f_type="$( xmlstarlet el "$f" | head -n 1 )"

    XML_FILES["$f_basename"]="$f_type"
done

# Make sure each XML file is present in the state XML.

for f in "${!XML_FILES[@]}"; do
    data="$( get_value "//file[@name='$f']/@name" <"$STATE_XML" )"

    if [[ -z "$data" ]]; then
        # Insert file info into state XML.

        tmpfile=$( mktemp )

        add_elem "//files" "file" <"$STATE_XML" |
        add_attr "//file[last()]" "name" "$f" >"$tmpfile"

        mv -f "$tmpfile" "$STATE_XML"
    fi
done

cat <<MESSAGE_END

This is a menu-driven tool for submitting files to the European
Nucleotide Archive (ENA) at EMBL-EBI.

The tool may be exited at any point by pressing <Ctrl>-C, or by choosing
"Exit" at the main menu.

All menus expect numeric input.

MESSAGE_END
main_menu
