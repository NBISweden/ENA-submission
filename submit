#!/bin/bash

## EXTERNAL DEPENDENCIES:
##  - XML Starlet ("xmlstarlet")
##  - Curl ("curl")
##  - GNU Date ("date")

ENA_TEST_URL="https://www-test.ebi.ac.uk/ena/submit/drop-box/submit"
ENA_PRODUCTION_URL="https://www.ebi.ac.uk/ena/submit/drop-box/submit"
ENA_WEBIN_FTP="webin.ebi.ac.uk"

function xml_init_submission
{
    # Creates an empty submission XML file in the current directory.

    cat >submission.xml <<XML_END
<SUBMISSION>
</SUBMISSION>
XML_END

    # Add the 'alias' and 'centre_name' attributes as well as an empty
    # "ACTIONS" subnode.

    submission_alias="${username}_$(date -u +"%Y%m%d:%H%M%S")"

    xmlstarlet ed --inplace \
        -i "/SUBMISSION" -t attr -n "alias" -v "$submission_alias" \
        -i "/SUBMISSION" -t attr -n "center_name" -v "$center_name" \
        -s "/SUBMISSION" -t elem -n "ACTIONS" -v '' \
        submission.xml
}

function xml_action
{
    # Adds an (empty) action to an existing submission XML file.
    # Parameters: $1 = type of action (ADD, MODIFY, HOLD, etc.)

    xmlstarlet ed --inplace \
        -s "/SUBMISSION/ACTIONS" -t elem -n "ACTION" -v '' \
        -s "//ACTION[last()]" -t elem -n "$1" -v '' \
        submission.xml
}

function xml_add
{
    # Adds an ADD action.
    # Parameters: $1 = XML file basename, $2 = schema

    xml_action "ADD"
    xmlstarlet ed --inplace \
        -i "//ACTION[last()]/ADD" -t attr -n "source" -v "$1" \
        -i "//ACTION[last()]/ADD" -t attr -n "schema" -v "$2" \
        submission.xml
}

function xml_modify
{
    # Adds a MODIFY action.
    # Parameters: $1 = XML file basename, $2 = schema

    xml_action "MODIFY"
    xmlstarlet ed --inplace \
        -i "//ACTION[last()]/MODIFY" -t attr -n "source" -v "$1" \
        -i "//ACTION[last()]/MODIFY" -t attr -n "schema" -v "$2" \
        submission.xml
}

function xml_validate
{
    # Adds a VALIDATE action.
    # Parameters: $1 = XML file basename, $2 = schema

    xml_action "VALIDATE"
    xmlstarlet ed --inplace \
        -i "//ACTION[last()]/VALIDATE" -t attr -n "source" -v "$1" \
        -i "//ACTION[last()]/VALIDATE" -t attr -n "schema" -v "$2" \
        submission.xml
}

function xml_hold
{
    # Adds a HOLD action.
    # Parameters: $1 = date

    xml_action "HOLD"
    xmlstarlet ed --inplace \
        -i "//ACTION[last()]/HOLD" -t attr -n "HoldUntilDate" -v "$1" \
        submission.xml
}

function xml_cancel
{
    # Adds a CANCEL action.
    # Parameters: $1 = accession to cancel

    xml_add_action "CANCEL"
    xmlstarlet ed --inplace \
        -i "//ACTION[last()]/CANCEL" -t attr -n "target" -v "$1" \
        submission.xml
}

# Read 'username', 'password' and 'center_name' from configuration file.

if [[ ! -f config ]]; then
    echo "Can not find configuration file 'config'" >&2
    exit 1
fi

username="$( sed -n 's/^username *//p' config )"
password="$( sed -n 's/^password *//p' config )"
center_name="$( sed -n 's/^center_name *//p' config )"

# Make sure the data file is there.

data_path="$1"
if [[ ! -f "$data_path" ]]; then
    printf "Can not find data file '%s'\n" "$data_path" >&2
    exit 1
fi

data_dirname="$( dirname "$data_path" )"
data_basename="$( basename "$data_path" )"

# Make sure that the sample and study XML files are located in the same
# directory as the data file.

for xml_file in "study.xml" "sample.xml"; do
    if [[ ! -f "$data_dirname/$xml_file" ]]; then
        printf "Can not find '%s' in directory '%s'\n" \
            "$xml_file" "$data_dirname" >&2
        error=1
    fi
done

if (( error )); then
    exit 1
fi

# Figure out what to do with the given XML files.

cat <<MESSAGE_END
This tool will create and submit a submission XML for the European
Nucleotide Archive (ENA).  Once the XML is submitted, the flat file
provided on the command line ("$data_path") will also be submitted.
------------------------------------------------------------------------
MESSAGE_END

select opt in \
    "Submit ADDITTION of study and sample XML files" \
    "Submit MODIFIED already submitted XML files" \
    "Exit this utility"; do
    case $REPLY in
        1)  action="ADD"
            break   ;;
        2)  action="MODIFY"
            break   ;;
        6)  exit 0  ;;
    esac
done

# Create the submission XML file.

xml_init_submission

for f in study sample; do
    case "$action" in
        ADD)        xml_add         "$f.xml" "$f"   ;;
        MODIFY)     xml_modify      "$f.xml" "$f"   ;;
        VALIDATE)   xml_validate    "$f.xml" "$f"   ;;
    esac
done

if [[ "$action" != "VALIDATE" ]]; then
    xml_hold "$(date -u -d "+2years" +"%Y-%m-%dZ")"
fi

# Make submission.

if ! curl --fail --insecure \
    -o submission-response.xml.raw \
    -F "SUBMISSION=@submission.xml" \
    -F "STUDY=@$data_dirname/study.xml" \
    -F "SAMPLE=@$data_dirname/sample.xml" \
    "$ENA_TEST_URL?auth=ENA%20$username%20$password"
then
    echo "Curl failed to submit the XML files" >&2
    exit 1
fi

xmlstarlet fo submission-response.xml.raw >submission-response.xml

success="$( xmlstarlet sel -t -v '/RECEIPT/@success' submission-response.xml )"

xmlstarlet sel -t -v '//MESSAGES/INFO' -nl submission-response.xml
xmlstarlet sel -t -v '//MESSAGES/ERROR' -nl submission-response.xml

if [[ "$success" = "false" ]]; then
    cat >&2 <<MESSAGE_END

STATUS: Submission failed, please refer to the messages that ENA gave
STATUS: as the response to the submission (above).  Consult the file
STATUS: "submission-response.xml" for the formatted XML response, or the
STATUS: file "submission-response.xml.raw" for the unformatted raw XML.
MESSAGE_END
    exit 1
fi

# Put study and sample IDs inte original study and sample XML files as
# the value of the "ENA_ID" tag.

for t in study sample; do
    oldIFS="$IFS"
    IFS=$'\n'

    ids=( $( xmlstarlet sel -t -v "//${t^^}/@accession" submission-response.xml ) )
    als=( $( xmlstarlet sel -t -v "//${t^^}/@alias" submission-response.xml ) )

    for (( i=0; i<${#ids[@]}; ++i )); do
        id="${ids[i]}"
        alias="${als[i]}"

        printf "%s accession is '%s', alias='%s'\n" "${t^}" "$id" "$alias"

        node="//${t^^}[@alias='$alias']/${t^^}_ATTRIBUTES"

        # Don't do this if the XML already has an attribute tag named "ENA_ID".
        old_id="$( xmlstarlet sel -t -v "$node/${t^^}_ATTRIBUTE/VALUE[../TAG='ENA_ID']" "$data_dirname/$t.xml" )"

        if [[ -z "$old_id" ]]; then
            xmlstarlet ed --inplace \
                -s "$node" \
                -t elem -n "${t^^}_ATTRIBUTE" -v '' \
                -s "$node/${t^^}_ATTRIBUTE[last()]" \
                -t elem -n 'TAG' -v 'ENA_ID' \
                -s "$node/${t^^}_ATTRIBUTE[last()]" \
                -t elem -n 'VALUE' -v "$id" "$data_dirname/$t.xml"
        fi
    done

    # Save the sample IDs and aliases in their own variables, we'll need
    # them for substituting in the flat file later.
    if [[ "$t" == "sample" ]]; then
        sample_ids=( "${ids[@]}" )
        sample_als=( "${als[@]}" )
    fi

    IFS="$oldIFS"
done

new_data_path="$data_dirname/new-$data_basename"
new_data_basename="$( basename "$new_data_path" )"

printf "Replacing the locus tags in '%s', creating '%s'...\n" \
    "$data_path" "$new_data_path"

# Create a simple sed script to carry out all substitutions.
for (( i=0; i<${#sample_ids[@]}; ++i )); do
    printf "s/${sample_als[i]}/${sample_ids[i]}/g\n"
done >substitutions.sed

# Execute substitutions.
sed -f substitutions.sed "$data_path" > "$new_data_path"

printf "Compressing '%s'...\n" "$new_data_path"
gzip --best -v "$new_data_path"
md5sum "$new_data_path.gz" | cut -d ' ' -f 1 >"$new_data_path.gz.md5"

printf "Submitting '%s.gz' and its MD5 checksum to ENA's FTP server...\n" \
    "$new_data_path"

ftp -n "$ENA_WEBIN_FTP" <<FTP_END
user $username $password
binary
put $new_data_path.gz $new_data_basename.gz
put $new_data_path.gz.md5 $new_data_basename.gz.md5
FTP_END

#vim: ft=sh
